// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`(AclStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
acl aaa {
  "127.0.0.1";
  "localhost";
}

---------- (output) --------------------------------------------------------------
acl aaa {
  "127.0.0.1";
  "localhost";
}
`;

exports[`(AddStatement) format TODO: cover operand types
addition 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel += "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(AddStatement) format assignment 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel = "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(AddStatement) format division 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel /= "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(AddStatement) format multiplication 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(AddStatement) format substraction 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel -= "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(AddStatement) format<long> TODO: cover operand types
addition 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel += "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel += "vacel";
`;

exports[`(AddStatement) format<long> assignment 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel = "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel = "vacel";
`;

exports[`(AddStatement) format<long> division 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel /= "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel /= "vacel";
`;

exports[`(AddStatement) format<long> multiplication 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel *= "vacel";
`;

exports[`(AddStatement) format<long> substraction 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel -= "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel -= "vacel";
`;

exports[`(AddStatement) format<short> TODO: cover operand types
addition 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel += "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel +=
  "vacel";
`;

exports[`(AddStatement) format<short> assignment 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel = "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel =
  "vacel";
`;

exports[`(AddStatement) format<short> division 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel /= "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel /=
  "vacel";
`;

exports[`(AddStatement) format<short> multiplication 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel *=
  "vacel";
`;

exports[`(AddStatement) format<short> substraction 1`] = `
---------- (input) ---------------------------------------------------------------
add var.vacel -= "vacel";

---------- (output) --------------------------------------------------------------
add var.vacel -=
  "vacel";
`;

exports[`(BackendStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
backend vaceline_backend {
  .connect_timeout = 1s;
  .dynamic = true;
  .port = "443";
  .host = "vaceline.io";
  .first_byte_timeout = 5s;
  .max_connections = 100;
  .between_bytes_timeout = 10s;
  .ssl = true;
  .probe = {
    .request = "GET /healthcheck HTTP/1.1" "Host: vaceline.io" "Connection: close" "User-Agent: Vaceline healthcheck";
    .threshold = 1;
    .window = 2;
    .timeout = 10s;
    .initial = 1;
    .expected_response = 200;
    .interval = 60s;
  }
}

---------- (output) --------------------------------------------------------------
`;

exports[`(BackendStatement) format<long> basic 1`] = `
---------- (input) ---------------------------------------------------------------
backend vaceline_backend {
  .connect_timeout = 1s;
  .dynamic = true;
  .port = "443";
  .host = "vaceline.io";
  .first_byte_timeout = 5s;
  .max_connections = 100;
  .between_bytes_timeout = 10s;
  .ssl = true;
  .probe = {
    .request = "GET /healthcheck HTTP/1.1" "Host: vaceline.io" "Connection: close" "User-Agent: Vaceline healthcheck";
    .threshold = 1;
    .window = 2;
    .timeout = 10s;
    .initial = 1;
    .expected_response = 200;
    .interval = 60s;
  }
}

---------- (output) --------------------------------------------------------------
backend vaceline_backend {
  .connect_timeout = 1s;
  .dynamic = true;
  .port = "443";
  .host = "vaceline.io";
  .first_byte_timeout = 5s;
  .max_connections = 100;
  .between_bytes_timeout = 10s;
  .ssl = true;
  .probe = {
    .request = "GET /healthcheck HTTP/1.1" "Host: vaceline.io" "Connection: close" "User-Agent: Vaceline healthcheck";
    .threshold = 1;
    .window = 2;
    .timeout = 10s;
    .initial = 1;
    .expected_response = 200;
    .interval = 60s;
  }
}
`;

exports[`(BackendStatement) format<short> basic 1`] = `
---------- (input) ---------------------------------------------------------------
backend vaceline_backend {
  .connect_timeout = 1s;
  .dynamic = true;
  .port = "443";
  .host = "vaceline.io";
  .first_byte_timeout = 5s;
  .max_connections = 100;
  .between_bytes_timeout = 10s;
  .ssl = true;
  .probe = {
    .request = "GET /healthcheck HTTP/1.1" "Host: vaceline.io" "Connection: close" "User-Agent: Vaceline healthcheck";
    .threshold = 1;
    .window = 2;
    .timeout = 10s;
    .initial = 1;
    .expected_response = 200;
    .interval = 60s;
  }
}

---------- (output) --------------------------------------------------------------
backend vaceline_backend {
  .connect_timeout = 1s;
  .dynamic = true;
  .port = "443";
  .host = "vaceline.io";
  .first_byte_timeout = 5s;
  .max_connections = 100;
  .between_bytes_timeout = 10s;
  .ssl = true;
  .probe = {
    .request = "GET /healthcheck HTTP/1.1"
      "Host: vaceline.io"
      "Connection: close"
      "User-Agent: Vaceline healthcheck";
    .threshold = 1;
    .window = 2;
    .timeout = 10s;
    .initial = 1;
    .expected_response = 200;
    .interval = 60s;
  }
}
`;

exports[`(BinaryExpression) format combination with LogicalExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1" && "2" == "3"

---------- (output) --------------------------------------------------------------
`;

exports[`(BinaryExpression) format equal 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1"

---------- (output) --------------------------------------------------------------
`;

exports[`(BinaryExpression) format match 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug ~ "1"

---------- (output) --------------------------------------------------------------
`;

exports[`(BinaryExpression) format multiple 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1" == "2" == "3"

---------- (output) --------------------------------------------------------------
`;

exports[`(BinaryExpression) format not equal 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug != "1"

---------- (output) --------------------------------------------------------------
`;

exports[`(BinaryExpression) format<long> combination with LogicalExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1" && "2" == "3"

---------- (output) --------------------------------------------------------------
req.http.Debug == "1" && "2" == "3"
`;

exports[`(BinaryExpression) format<long> equal 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1"

---------- (output) --------------------------------------------------------------
req.http.Debug == "1"
`;

exports[`(BinaryExpression) format<long> match 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug ~ "1"

---------- (output) --------------------------------------------------------------
req.http.Debug ~ "1"
`;

exports[`(BinaryExpression) format<long> multiple 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1" == "2" == "3"

---------- (output) --------------------------------------------------------------
((req.http.Debug == "1") == "2") == "3"
`;

exports[`(BinaryExpression) format<long> not equal 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug != "1"

---------- (output) --------------------------------------------------------------
req.http.Debug != "1"
`;

exports[`(BinaryExpression) format<short> combination with LogicalExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1" && "2" == "3"

---------- (output) --------------------------------------------------------------
req
  .http
  .Debug ==
  "1" &&
  "2" ==
    "3"
`;

exports[`(BinaryExpression) format<short> equal 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1"

---------- (output) --------------------------------------------------------------
req
  .http
  .Debug ==
  "1"
`;

exports[`(BinaryExpression) format<short> match 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug ~ "1"

---------- (output) --------------------------------------------------------------
req
  .http
  .Debug ~
  "1"
`;

exports[`(BinaryExpression) format<short> multiple 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "1" == "2" == "3"

---------- (output) --------------------------------------------------------------
((req
  .http
  .Debug ==
  "1") ==
  "2") ==
  "3"
`;

exports[`(BinaryExpression) format<short> not equal 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug != "1"

---------- (output) --------------------------------------------------------------
req
  .http
  .Debug !=
  "1"
`;

exports[`(BooleanExpression) format with binary 1`] = `
---------- (input) ---------------------------------------------------------------
(req.http.Debug == "1")

---------- (output) --------------------------------------------------------------
`;

exports[`(BooleanExpression) format with logical 1`] = `
---------- (input) ---------------------------------------------------------------
(var.Debug && "1")

---------- (output) --------------------------------------------------------------
`;

exports[`(BooleanExpression) format<long> with binary 1`] = `
---------- (input) ---------------------------------------------------------------
(req.http.Debug == "1")

---------- (output) --------------------------------------------------------------
(req.http.Debug == "1")
`;

exports[`(BooleanExpression) format<long> with logical 1`] = `
---------- (input) ---------------------------------------------------------------
(var.Debug && "1")

---------- (output) --------------------------------------------------------------
(var.Debug && "1")
`;

exports[`(BooleanExpression) format<short> with binary 1`] = `
---------- (input) ---------------------------------------------------------------
(req.http.Debug == "1")

---------- (output) --------------------------------------------------------------
(
  req
    .http
    .Debug ==
    "1"
)
`;

exports[`(BooleanExpression) format<short> with logical 1`] = `
---------- (input) ---------------------------------------------------------------
(var.Debug && "1")

---------- (output) --------------------------------------------------------------
(
  var.Debug &&
    "1"
)
`;

exports[`(BooleanLiteral) format false 1`] = `
---------- (input) ---------------------------------------------------------------
false

---------- (output) --------------------------------------------------------------
false
`;

exports[`(BooleanLiteral) format true 1`] = `
---------- (input) ---------------------------------------------------------------
true

---------- (output) --------------------------------------------------------------
true
`;

exports[`(CallStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
call vaceline_func;

---------- (output) --------------------------------------------------------------
call vaceline_func;
`;

exports[`(ConcatExpression) format expressions 1`] = `
---------- (input) ---------------------------------------------------------------
"a" 1 req.http.A

---------- (output) --------------------------------------------------------------
`;

exports[`(ConcatExpression) format strings 1`] = `
---------- (input) ---------------------------------------------------------------
"a" "b" "c"

---------- (output) --------------------------------------------------------------
`;

exports[`(ConcatExpression) format<long> expressions 1`] = `
---------- (input) ---------------------------------------------------------------
"a" 1 req.http.A

---------- (output) --------------------------------------------------------------
"a" 1 req.http.A
`;

exports[`(ConcatExpression) format<long> strings 1`] = `
---------- (input) ---------------------------------------------------------------
"a" "b" "c"

---------- (output) --------------------------------------------------------------
"a" "b" "c"
`;

exports[`(ConcatExpression) format<short> expressions 1`] = `
---------- (input) ---------------------------------------------------------------
"a" 1 req.http.A

---------- (output) --------------------------------------------------------------
"a"
  1
  req
    .http
    .A
`;

exports[`(ConcatExpression) format<short> strings 1`] = `
---------- (input) ---------------------------------------------------------------
"a" "b" "c"

---------- (output) --------------------------------------------------------------
"a"
  "b"
  "c"
`;

exports[`(DeclareStatement) format bool 1`] = `
---------- (input) ---------------------------------------------------------------
declare local var.Vaceline BOOL;

---------- (output) --------------------------------------------------------------
declare local var.Vaceline BOOL;
`;

exports[`(DeclareStatement) format float 1`] = `
---------- (input) ---------------------------------------------------------------
declare local var.Vaceline FLOAT;

---------- (output) --------------------------------------------------------------
declare local var.Vaceline FLOAT;
`;

exports[`(DeclareStatement) format integer 1`] = `
---------- (input) ---------------------------------------------------------------
declare local var.Vaceline INTEGER;

---------- (output) --------------------------------------------------------------
declare local var.Vaceline INTEGER;
`;

exports[`(DeclareStatement) format string 1`] = `
---------- (input) ---------------------------------------------------------------
declare local var.Vaceline STRING;

---------- (output) --------------------------------------------------------------
declare local var.Vaceline STRING;
`;

exports[`(DurationLiteral) format day 1`] = `
---------- (input) ---------------------------------------------------------------
1d

---------- (output) --------------------------------------------------------------
1d
`;

exports[`(DurationLiteral) format min 1`] = `
---------- (input) ---------------------------------------------------------------
1m

---------- (output) --------------------------------------------------------------
1m
`;

exports[`(DurationLiteral) format ms 1`] = `
---------- (input) ---------------------------------------------------------------
1ms

---------- (output) --------------------------------------------------------------
1ms
`;

exports[`(DurationLiteral) format s 1`] = `
---------- (input) ---------------------------------------------------------------
1s

---------- (output) --------------------------------------------------------------
1s
`;

exports[`(DurationLiteral) format with space between 1`] = `
---------- (input) ---------------------------------------------------------------
1   m

---------- (output) --------------------------------------------------------------
1m
`;

exports[`(DurationLiteral) format year 1`] = `
---------- (input) ---------------------------------------------------------------
1y

---------- (output) --------------------------------------------------------------
1y
`;

exports[`(ErrorStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
error 404;

---------- (output) --------------------------------------------------------------
error 404;
`;

exports[`(ErrorStatement) format with response 1`] = `
---------- (input) ---------------------------------------------------------------
error 404 "Not Found";

---------- (output) --------------------------------------------------------------
error 404 "Not Found";
`;

exports[`(ErrorStatement) format with variable response 1`] = `
---------- (input) ---------------------------------------------------------------
error 800 req.http.Debug;

---------- (output) --------------------------------------------------------------
`;

exports[`(ErrorStatement) format<long> with variable response 1`] = `
---------- (input) ---------------------------------------------------------------
error 800 req.http.Debug;

---------- (output) --------------------------------------------------------------
error 800 req.http.Debug;
`;

exports[`(ErrorStatement) format<short> with variable response 1`] = `
---------- (input) ---------------------------------------------------------------
error 800 req.http.Debug;

---------- (output) --------------------------------------------------------------
error 800 req
  .http
  .Debug;
`;

exports[`(ExpressionStatement) format with FunCallExpression 1`] = `
---------- (input) ---------------------------------------------------------------
func(a);

---------- (output) --------------------------------------------------------------
`;

exports[`(ExpressionStatement) format with Identifer 1`] = `
---------- (input) ---------------------------------------------------------------
vaceline;

---------- (output) --------------------------------------------------------------
vaceline;
`;

exports[`(ExpressionStatement) format with Literal 1`] = `
---------- (input) ---------------------------------------------------------------
"string";

---------- (output) --------------------------------------------------------------
"string";
`;

exports[`(ExpressionStatement) format with Member & Identifier 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Vaceline;

---------- (output) --------------------------------------------------------------
`;

exports[`(ExpressionStatement) format<long> with FunCallExpression 1`] = `
---------- (input) ---------------------------------------------------------------
func(a);

---------- (output) --------------------------------------------------------------
func(a);
`;

exports[`(ExpressionStatement) format<long> with Member & Identifier 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Vaceline;

---------- (output) --------------------------------------------------------------
req.http.Vaceline;
`;

exports[`(ExpressionStatement) format<short> with FunCallExpression 1`] = `
---------- (input) ---------------------------------------------------------------
func(a);

---------- (output) --------------------------------------------------------------
func(
  a,
);
`;

exports[`(ExpressionStatement) format<short> with Member & Identifier 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Vaceline;

---------- (output) --------------------------------------------------------------
req
  .http
  .Vaceline;
`;

exports[`(FunCallExpression) format \`if\` func 1`] = `
---------- (input) ---------------------------------------------------------------
if("a", "b", "c")

---------- (output) --------------------------------------------------------------
`;

exports[`(FunCallExpression) format normal 1`] = `
---------- (input) ---------------------------------------------------------------
func("a")

---------- (output) --------------------------------------------------------------
`;

exports[`(FunCallExpression) format with multiple args 1`] = `
---------- (input) ---------------------------------------------------------------
func("a", "b")

---------- (output) --------------------------------------------------------------
`;

exports[`(FunCallExpression) format with whitespace 1`] = `
---------- (input) ---------------------------------------------------------------
func  ("a")

---------- (output) --------------------------------------------------------------
`;

exports[`(FunCallExpression) format<long> \`if\` func 1`] = `
---------- (input) ---------------------------------------------------------------
if("a", "b", "c")

---------- (output) --------------------------------------------------------------
if("a", "b", "c")
`;

exports[`(FunCallExpression) format<long> normal 1`] = `
---------- (input) ---------------------------------------------------------------
func("a")

---------- (output) --------------------------------------------------------------
func("a")
`;

exports[`(FunCallExpression) format<long> with multiple args 1`] = `
---------- (input) ---------------------------------------------------------------
func("a", "b")

---------- (output) --------------------------------------------------------------
func("a", "b")
`;

exports[`(FunCallExpression) format<long> with whitespace 1`] = `
---------- (input) ---------------------------------------------------------------
func  ("a")

---------- (output) --------------------------------------------------------------
func("a")
`;

exports[`(FunCallExpression) format<short> \`if\` func 1`] = `
---------- (input) ---------------------------------------------------------------
if("a", "b", "c")

---------- (output) --------------------------------------------------------------
if(
  "a",
  "b",
  "c",
)
`;

exports[`(FunCallExpression) format<short> normal 1`] = `
---------- (input) ---------------------------------------------------------------
func("a")

---------- (output) --------------------------------------------------------------
func(
  "a",
)
`;

exports[`(FunCallExpression) format<short> with multiple args 1`] = `
---------- (input) ---------------------------------------------------------------
func("a", "b")

---------- (output) --------------------------------------------------------------
func(
  "a",
  "b",
)
`;

exports[`(FunCallExpression) format<short> with whitespace 1`] = `
---------- (input) ---------------------------------------------------------------
func  ("a")

---------- (output) --------------------------------------------------------------
func(
  "a",
)
`;

exports[`(Identifier) format normal 1`] = `
---------- (input) ---------------------------------------------------------------
vaceline

---------- (output) --------------------------------------------------------------
vaceline
`;

exports[`(IfStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
}

---------- (output) --------------------------------------------------------------
`;

exports[`(IfStatement) format with else 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else {
  set var.value = 2;
}

---------- (output) --------------------------------------------------------------
`;

exports[`(IfStatement) format with else if 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else if (!var.condition) {
  set var.value = 2;
} else {
  set var.value = 0;
}

---------- (output) --------------------------------------------------------------
`;

exports[`(IfStatement) format with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {

  set var.value = 1;

} else if (!var.condition) {

  set var.value = 2;

} else {

  set var.value = 0;

}

---------- (output) --------------------------------------------------------------
`;

exports[`(IfStatement) format<long> basic 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
}

---------- (output) --------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
}
`;

exports[`(IfStatement) format<long> with else 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else {
  set var.value = 2;
}

---------- (output) --------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else {
  set var.value = 2;
}
`;

exports[`(IfStatement) format<long> with else if 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else if (!var.condition) {
  set var.value = 2;
} else {
  set var.value = 0;
}

---------- (output) --------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else if (!var.condition) {
  set var.value = 2;
} else {
  set var.value = 0;
}
`;

exports[`(IfStatement) format<long> with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {

  set var.value = 1;

} else if (!var.condition) {

  set var.value = 2;

} else {

  set var.value = 0;

}

---------- (output) --------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else if (!var.condition) {
  set var.value = 2;
} else {
  set var.value = 0;
}
`;

exports[`(IfStatement) format<short> basic 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
}

---------- (output) --------------------------------------------------------------
if (
  var.condition
) {
  set var.value =
    1;
}
`;

exports[`(IfStatement) format<short> with else 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else {
  set var.value = 2;
}

---------- (output) --------------------------------------------------------------
if (
  var.condition
) {
  set var.value =
    1;
} else {
  set var.value =
    2;
}
`;

exports[`(IfStatement) format<short> with else if 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {
  set var.value = 1;
} else if (!var.condition) {
  set var.value = 2;
} else {
  set var.value = 0;
}

---------- (output) --------------------------------------------------------------
if (
  var.condition
) {
  set var.value =
    1;
} else if (
  !var.condition
) {
  set var.value =
    2;
} else {
  set var.value =
    0;
}
`;

exports[`(IfStatement) format<short> with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
if (var.condition) {

  set var.value = 1;

} else if (!var.condition) {

  set var.value = 2;

} else {

  set var.value = 0;

}

---------- (output) --------------------------------------------------------------
if (
  var.condition
) {
  set var.value =
    1;
} else if (
  !var.condition
) {
  set var.value =
    2;
} else {
  set var.value =
    0;
}
`;

exports[`(ImportStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
import module;

---------- (output) --------------------------------------------------------------
import module;
`;

exports[`(IncludeStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
include "external_library";

---------- (output) --------------------------------------------------------------
include "external_library";
`;

exports[`(Ip) format 6to4 mapping 1`] = `
---------- (input) ---------------------------------------------------------------
"2002:c000:0204::"

---------- (output) --------------------------------------------------------------
"2002:c000:0204::"
`;

exports[`(Ip) format 6to4 mapping 2`] = `
---------- (input) ---------------------------------------------------------------
"::FFFF:192.0.2.4"

---------- (output) --------------------------------------------------------------
"::FFFF:192.0.2.4"
`;

exports[`(Ip) format 6to4 mapping 3`] = `
---------- (input) ---------------------------------------------------------------
"::1"

---------- (output) --------------------------------------------------------------
"::1"
`;

exports[`(Ip) format IPv4 1`] = `
---------- (input) ---------------------------------------------------------------
"192.0.2.0"

---------- (output) --------------------------------------------------------------
"192.0.2.0"
`;

exports[`(Ip) format IPv4 with cidr 1`] = `
---------- (input) ---------------------------------------------------------------
"192.0.2.0"/16

---------- (output) --------------------------------------------------------------
"192.0.2.0"/16
`;

exports[`(Ip) format IPv6 1`] = `
---------- (input) ---------------------------------------------------------------
"2001:db8::1"

---------- (output) --------------------------------------------------------------
"2001:db8::1"
`;

exports[`(Ip) format IPv6 with cidr 1`] = `
---------- (input) ---------------------------------------------------------------
"2001:db8::1"/16

---------- (output) --------------------------------------------------------------
"2001:db8::1"/16
`;

exports[`(Ip) format localhost 1`] = `
---------- (input) ---------------------------------------------------------------
"localhost"

---------- (output) --------------------------------------------------------------
"localhost"
`;

exports[`(Ip) format unspecified address 1`] = `
---------- (input) ---------------------------------------------------------------
"::"

---------- (output) --------------------------------------------------------------
"::"
`;

exports[`(LogStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
log "log" req.service_id "vaceline-log :: "
  {"	timestamp_us:"} time.start.usec
  {"	host:"} regsuball(req.http.X-Forwarded-Host, {"	"}, "");

---------- (output) --------------------------------------------------------------
`;

exports[`(LogStatement) format<long> basic 1`] = `
---------- (input) ---------------------------------------------------------------
log "log" req.service_id "vaceline-log :: "
  {"	timestamp_us:"} time.start.usec
  {"	host:"} regsuball(req.http.X-Forwarded-Host, {"	"}, "");

---------- (output) --------------------------------------------------------------
log "log" req.service_id "vaceline-log :: " {"	timestamp_us:"} time.start.usec {"	host:"} regsuball(req.http.X-Forwarded-Host, {"	"}, "");
`;

exports[`(LogStatement) format<short> basic 1`] = `
---------- (input) ---------------------------------------------------------------
log "log" req.service_id "vaceline-log :: "
  {"	timestamp_us:"} time.start.usec
  {"	host:"} regsuball(req.http.X-Forwarded-Host, {"	"}, "");

---------- (output) --------------------------------------------------------------
log "log"
  req.service_id
  "vaceline-log :: "
  {"	timestamp_us:"}
  time
    .start
    .usec
  {"	host:"}
  regsuball(
    req
      .http
      .X-Forwarded-Host,
    {"	"},
    "",
  );
`;

exports[`(LogicalExpression) format and 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug && "1"

---------- (output) --------------------------------------------------------------
`;

exports[`(LogicalExpression) format combination 1`] = `
---------- (input) ---------------------------------------------------------------
debug && "1" || "2"

---------- (output) --------------------------------------------------------------
`;

exports[`(LogicalExpression) format combination with BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
debug == "1" && "2"

---------- (output) --------------------------------------------------------------
`;

exports[`(LogicalExpression) format combination2 1`] = `
---------- (input) ---------------------------------------------------------------
debug || "1" && "2"

---------- (output) --------------------------------------------------------------
`;

exports[`(LogicalExpression) format combination2 with BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
debug == "1" || "2"

---------- (output) --------------------------------------------------------------
`;

exports[`(LogicalExpression) format combination3 1`] = `
---------- (input) ---------------------------------------------------------------
debug && "1" == "2"

---------- (output) --------------------------------------------------------------
`;

exports[`(LogicalExpression) format combination4 1`] = `
---------- (input) ---------------------------------------------------------------
debug || "1" == "2"

---------- (output) --------------------------------------------------------------
`;

exports[`(LogicalExpression) format or 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug || "1"

---------- (output) --------------------------------------------------------------
`;

exports[`(LogicalExpression) format<long> and 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug && "1"

---------- (output) --------------------------------------------------------------
req.http.Debug && "1"
`;

exports[`(LogicalExpression) format<long> combination 1`] = `
---------- (input) ---------------------------------------------------------------
debug && "1" || "2"

---------- (output) --------------------------------------------------------------
(debug && "1") || "2"
`;

exports[`(LogicalExpression) format<long> combination with BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
debug == "1" && "2"

---------- (output) --------------------------------------------------------------
debug == "1" && "2"
`;

exports[`(LogicalExpression) format<long> combination2 1`] = `
---------- (input) ---------------------------------------------------------------
debug || "1" && "2"

---------- (output) --------------------------------------------------------------
debug || ("1" && "2")
`;

exports[`(LogicalExpression) format<long> combination2 with BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
debug == "1" || "2"

---------- (output) --------------------------------------------------------------
debug == "1" || "2"
`;

exports[`(LogicalExpression) format<long> combination3 1`] = `
---------- (input) ---------------------------------------------------------------
debug && "1" == "2"

---------- (output) --------------------------------------------------------------
debug && "1" == "2"
`;

exports[`(LogicalExpression) format<long> combination4 1`] = `
---------- (input) ---------------------------------------------------------------
debug || "1" == "2"

---------- (output) --------------------------------------------------------------
debug || "1" == "2"
`;

exports[`(LogicalExpression) format<long> or 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug || "1"

---------- (output) --------------------------------------------------------------
req.http.Debug || "1"
`;

exports[`(LogicalExpression) format<short> and 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug && "1"

---------- (output) --------------------------------------------------------------
req
  .http
  .Debug &&
  "1"
`;

exports[`(LogicalExpression) format<short> combination 1`] = `
---------- (input) ---------------------------------------------------------------
debug && "1" || "2"

---------- (output) --------------------------------------------------------------
(debug &&
  "1") ||
  "2"
`;

exports[`(LogicalExpression) format<short> combination with BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
debug == "1" && "2"

---------- (output) --------------------------------------------------------------
debug ==
  "1" &&
  "2"
`;

exports[`(LogicalExpression) format<short> combination2 1`] = `
---------- (input) ---------------------------------------------------------------
debug || "1" && "2"

---------- (output) --------------------------------------------------------------
debug ||
  ("1" &&
    "2")
`;

exports[`(LogicalExpression) format<short> combination2 with BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
debug == "1" || "2"

---------- (output) --------------------------------------------------------------
debug ==
  "1" ||
  "2"
`;

exports[`(LogicalExpression) format<short> combination3 1`] = `
---------- (input) ---------------------------------------------------------------
debug && "1" == "2"

---------- (output) --------------------------------------------------------------
debug &&
  "1" ==
    "2"
`;

exports[`(LogicalExpression) format<short> combination4 1`] = `
---------- (input) ---------------------------------------------------------------
debug || "1" == "2"

---------- (output) --------------------------------------------------------------
debug ||
  "1" ==
    "2"
`;

exports[`(LogicalExpression) format<short> or 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug || "1"

---------- (output) --------------------------------------------------------------
req
  .http
  .Debug ||
  "1"
`;

exports[`(Member) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
req.backend

---------- (output) --------------------------------------------------------------
req.backend
`;

exports[`(Member) format deep 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug

---------- (output) --------------------------------------------------------------
`;

exports[`(Member) format deep in BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "debug"

---------- (output) --------------------------------------------------------------
`;

exports[`(Member) format in BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.backend == backend

---------- (output) --------------------------------------------------------------
`;

exports[`(Member) format<long> deep 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug

---------- (output) --------------------------------------------------------------
req.http.Debug
`;

exports[`(Member) format<long> deep in BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "debug"

---------- (output) --------------------------------------------------------------
req.http.Debug == "debug"
`;

exports[`(Member) format<long> in BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.backend == backend

---------- (output) --------------------------------------------------------------
req.backend == backend
`;

exports[`(Member) format<short> deep 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug

---------- (output) --------------------------------------------------------------
req
  .http
  .Debug
`;

exports[`(Member) format<short> deep in BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.http.Debug == "debug"

---------- (output) --------------------------------------------------------------
req
  .http
  .Debug ==
  "debug"
`;

exports[`(Member) format<short> in BinaryExpression 1`] = `
---------- (input) ---------------------------------------------------------------
req.backend == backend

---------- (output) --------------------------------------------------------------
req.backend ==
  backend
`;

exports[`(MultilineLiteral) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
{"
  vaceline
"}

---------- (output) --------------------------------------------------------------
{"
  vaceline
"}
`;

exports[`(NumericLiteral) format integer 1`] = `
---------- (input) ---------------------------------------------------------------
10

---------- (output) --------------------------------------------------------------
10
`;

exports[`(NumericLiteral) format zero 1`] = `
---------- (input) ---------------------------------------------------------------
0

---------- (output) --------------------------------------------------------------
0
`;

exports[`(Program) format comment 1`] = `
---------- (input) ---------------------------------------------------------------
# aaa
set var.vacelineDebug = "1";
# bbb
set var.vacelineDebug = "2";

---------- (output) --------------------------------------------------------------
`;

exports[`(Program) format single handling 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  declare local var.vacelinDebug STRING;
  set var.vacelineDebug = "initial";

  if (req.http.Vacelin:Some == "Some") {
    add var.vacelinDebug = "Vacelin Debug Log";
  }
}

---------- (output) --------------------------------------------------------------
`;

exports[`(Program) format with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
declare local var.vacelinDebug STRING;
set var.vacelineDebug = "1";

set var.vacelineDebug = "2";


set var.vacelineDebug = "3";



set var.vacelineDebug = "4";




set var.vacelineDebug = "5";

---------- (output) --------------------------------------------------------------
`;

exports[`(Program) format<long> comment 1`] = `
---------- (input) ---------------------------------------------------------------
# aaa
set var.vacelineDebug = "1";
# bbb
set var.vacelineDebug = "2";

---------- (output) --------------------------------------------------------------
set var.vacelineDebug = "1";
set var.vacelineDebug = "2";
`;

exports[`(Program) format<long> single handling 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  declare local var.vacelinDebug STRING;
  set var.vacelineDebug = "initial";

  if (req.http.Vacelin:Some == "Some") {
    add var.vacelinDebug = "Vacelin Debug Log";
  }
}

---------- (output) --------------------------------------------------------------
sub vcl_recv {
  declare local var.vacelinDebug STRING;
  set var.vacelineDebug = "initial";
  if (req.http.Vacelin:Some == "Some") {
    add var.vacelinDebug = "Vacelin Debug Log";
  }
}
`;

exports[`(Program) format<long> with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
declare local var.vacelinDebug STRING;
set var.vacelineDebug = "1";

set var.vacelineDebug = "2";


set var.vacelineDebug = "3";



set var.vacelineDebug = "4";




set var.vacelineDebug = "5";

---------- (output) --------------------------------------------------------------
declare local var.vacelinDebug STRING;
set var.vacelineDebug = "1";
set var.vacelineDebug = "2";
set var.vacelineDebug = "3";
set var.vacelineDebug = "4";
set var.vacelineDebug = "5";
`;

exports[`(Program) format<short> comment 1`] = `
---------- (input) ---------------------------------------------------------------
# aaa
set var.vacelineDebug = "1";
# bbb
set var.vacelineDebug = "2";

---------- (output) --------------------------------------------------------------
set var.vacelineDebug =
  "1";
set var.vacelineDebug =
  "2";
`;

exports[`(Program) format<short> single handling 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  declare local var.vacelinDebug STRING;
  set var.vacelineDebug = "initial";

  if (req.http.Vacelin:Some == "Some") {
    add var.vacelinDebug = "Vacelin Debug Log";
  }
}

---------- (output) --------------------------------------------------------------
sub vcl_recv {
  declare local var.vacelinDebug STRING;
  set var.vacelineDebug =
    "initial";
  if (
    req
      .http
      .Vacelin:Some ==
      "Some"
  ) {
    add var.vacelinDebug =
      "Vacelin Debug Log";
  }
}
`;

exports[`(Program) format<short> with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
declare local var.vacelinDebug STRING;
set var.vacelineDebug = "1";

set var.vacelineDebug = "2";


set var.vacelineDebug = "3";



set var.vacelineDebug = "4";




set var.vacelineDebug = "5";

---------- (output) --------------------------------------------------------------
declare local var.vacelinDebug STRING;
set var.vacelineDebug =
  "1";
set var.vacelineDebug =
  "2";
set var.vacelineDebug =
  "3";
set var.vacelineDebug =
  "4";
set var.vacelineDebug =
  "5";
`;

exports[`(RestartStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
restart;

---------- (output) --------------------------------------------------------------
restart;
`;

exports[`(ReturnStatement) format with parens 1`] = `
---------- (input) ---------------------------------------------------------------
return (pass);

---------- (output) --------------------------------------------------------------
return (pass);
`;

exports[`(SetStatement) format addition 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel += "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(SetStatement) format assignment 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel = "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(SetStatement) format division 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(SetStatement) format multiplication 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(SetStatement) format substraction 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel -= "vacel";

---------- (output) --------------------------------------------------------------
`;

exports[`(SetStatement) format<long> addition 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel += "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel += "vacel";
`;

exports[`(SetStatement) format<long> assignment 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel = "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel = "vacel";
`;

exports[`(SetStatement) format<long> division 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel *= "vacel";
`;

exports[`(SetStatement) format<long> multiplication 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel *= "vacel";
`;

exports[`(SetStatement) format<long> substraction 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel -= "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel -= "vacel";
`;

exports[`(SetStatement) format<short> addition 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel += "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel +=
  "vacel";
`;

exports[`(SetStatement) format<short> assignment 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel = "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel =
  "vacel";
`;

exports[`(SetStatement) format<short> division 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel *=
  "vacel";
`;

exports[`(SetStatement) format<short> multiplication 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel *= "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel *=
  "vacel";
`;

exports[`(SetStatement) format<short> substraction 1`] = `
---------- (input) ---------------------------------------------------------------
set var.vacel -= "vacel";

---------- (output) --------------------------------------------------------------
set var.vacel -=
  "vacel";
`;

exports[`(StringLiteral) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
"string"

---------- (output) --------------------------------------------------------------
"string"
`;

exports[`(StringLiteral) format not a comment 1`] = `
---------- (input) ---------------------------------------------------------------
"# not a comment"

---------- (output) --------------------------------------------------------------
"# not a comment"
`;

exports[`(StringLiteral) format not an inline comment 1`] = `
---------- (input) ---------------------------------------------------------------
"/* not an inline comment */"

---------- (output) --------------------------------------------------------------
"/* not an inline comment */"
`;

exports[`(SubroutineStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  set vaceline = "aaa";
  set vaceline = "bbb";
}

---------- (output) --------------------------------------------------------------
`;

exports[`(SubroutineStatement) format with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  set vaceline = "aaa";


  set vaceline = "bbb";


}

---------- (output) --------------------------------------------------------------
`;

exports[`(SubroutineStatement) format<long> basic 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  set vaceline = "aaa";
  set vaceline = "bbb";
}

---------- (output) --------------------------------------------------------------
sub vcl_recv {
  set vaceline = "aaa";
  set vaceline = "bbb";
}
`;

exports[`(SubroutineStatement) format<long> with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  set vaceline = "aaa";


  set vaceline = "bbb";


}

---------- (output) --------------------------------------------------------------
sub vcl_recv {
  set vaceline = "aaa";
  set vaceline = "bbb";
}
`;

exports[`(SubroutineStatement) format<short> basic 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  set vaceline = "aaa";
  set vaceline = "bbb";
}

---------- (output) --------------------------------------------------------------
sub vcl_recv {
  set vaceline =
    "aaa";
  set vaceline =
    "bbb";
}
`;

exports[`(SubroutineStatement) format<short> with empty lines 1`] = `
---------- (input) ---------------------------------------------------------------
sub vcl_recv {
  set vaceline = "aaa";


  set vaceline = "bbb";


}

---------- (output) --------------------------------------------------------------
sub vcl_recv {
  set vaceline =
    "aaa";
  set vaceline =
    "bbb";
}
`;

exports[`(SyntheticStatement) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
synthetic "";

---------- (output) --------------------------------------------------------------
synthetic "";
`;

exports[`(TableStatement) format single key-value 1`] = `
---------- (input) ---------------------------------------------------------------
table vaceline_table {
  "key": "value"
}

---------- (output) --------------------------------------------------------------
table vaceline_table {
  "key":"value"
}
`;

exports[`(TableStatement) format single key-values 1`] = `
---------- (input) ---------------------------------------------------------------
table vaceline_table {
  "key": "value",
  "key2": "value2"
}

---------- (output) --------------------------------------------------------------
table vaceline_table {
  "key":"value",
  "key2":"value2"
}
`;

exports[`(UnaryExpression) format boolean literal 1`] = `
---------- (input) ---------------------------------------------------------------
!true

---------- (output) --------------------------------------------------------------
!true
`;

exports[`(UnaryExpression) format variable 1`] = `
---------- (input) ---------------------------------------------------------------
!condition

---------- (output) --------------------------------------------------------------
!condition
`;

exports[`(UnsetStatement) format member 1`] = `
---------- (input) ---------------------------------------------------------------
unset var.value;

---------- (output) --------------------------------------------------------------
unset var.value;
`;

exports[`(UnsetStatement) format variable 1`] = `
---------- (input) ---------------------------------------------------------------
unset value;

---------- (output) --------------------------------------------------------------
unset value;
`;

exports[`(ValuePair) format basic 1`] = `
---------- (input) ---------------------------------------------------------------
Cookie:Vacelin

---------- (output) --------------------------------------------------------------
Cookie:Vacelin
`;
