self.webpackChunk([2],{20:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\nvar builders_gen_namespaceObject = {};\n__webpack_require__.r(builders_gen_namespaceObject);\n__webpack_require__.d(builders_gen_namespaceObject, \"buildProgram\", function() { return buildProgram; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildBooleanLiteral\", function() { return buildBooleanLiteral; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildStringLiteral\", function() { return buildStringLiteral; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildMultilineLiteral\", function() { return buildMultilineLiteral; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildDurationLiteral\", function() { return buildDurationLiteral; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildNumericLiteral\", function() { return buildNumericLiteral; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildIdentifier\", function() { return buildIdentifier; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildIp\", function() { return buildIp; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildMember\", function() { return buildMember; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildValuePair\", function() { return buildValuePair; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildBooleanExpression\", function() { return buildBooleanExpression; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildUnaryExpression\", function() { return buildUnaryExpression; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildFunCallExpression\", function() { return buildFunCallExpression; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildConcatExpression\", function() { return buildConcatExpression; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildBinaryExpression\", function() { return buildBinaryExpression; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildLogicalExpression\", function() { return buildLogicalExpression; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildExpressionStatement\", function() { return buildExpressionStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildIncludeStatement\", function() { return buildIncludeStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildImportStatement\", function() { return buildImportStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildCallStatement\", function() { return buildCallStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildDeclareStatement\", function() { return buildDeclareStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildAddStatement\", function() { return buildAddStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildSetStatement\", function() { return buildSetStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildUnsetStatement\", function() { return buildUnsetStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildReturnStatement\", function() { return buildReturnStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildErrorStatement\", function() { return buildErrorStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildRestartStatement\", function() { return buildRestartStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildSyntheticStatement\", function() { return buildSyntheticStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildLogStatement\", function() { return buildLogStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildIfStatement\", function() { return buildIfStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildSubroutineStatement\", function() { return buildSubroutineStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildAclStatement\", function() { return buildAclStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildBackendDefinition\", function() { return buildBackendDefinition; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildBackendStatement\", function() { return buildBackendStatement; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildTableDefinition\", function() { return buildTableDefinition; });\n__webpack_require__.d(builders_gen_namespaceObject, \"buildTableStatement\", function() { return buildTableStatement; });\n\n// CONCATENATED MODULE: ./src/utils/chalk.ts\nconst chalk = // FIXME: remove undefined handling after server-side is also built by webpack\ntypeof BUILD_PLATFORM !== 'undefined' && BUILD_PLATFORM === 'browser' ? null : __webpack_require__(6);\n\nconst emptyChalk = s => s;\n\nconst red = chalk ? chalk.redBright.bold : emptyChalk;\nconst gray = chalk ? chalk.gray : emptyChalk;\n// CONCATENATED MODULE: ./src/parser/create-error.ts\n\nconst MARGIN = 2;\nconst HORIZONTAL_MARK = '> ';\nconst VERTICAL_MARK = '^';\nconst createError = (source, message, start, end) => {\n  const lines = source.split('\\n'); // const loc = getLocation(lines, start, end)\n\n  const loc = {\n    line: start.line,\n    column: start.column,\n    range: end ? end.column - start.column : 1\n  };\n  const topLine = loc.line - MARGIN - 1 > 0 ? loc.line - MARGIN - 1 : 0;\n  const bottomLine = loc.line + MARGIN <= lines.length ? loc.line + MARGIN : lines.length;\n  const pad = String(bottomLine).length; // The max of line num digits\n\n  const verticalMark = ' '.repeat('> '.length + pad + ' | '.length + loc.column - 1) + red(VERTICAL_MARK.repeat(loc.range));\n  const errorLocationDisplay = [];\n  lines.slice(topLine, bottomLine).forEach((lineStr, num) => {\n    const currentLine = topLine + num + 1;\n    const isTargetLine = currentLine === loc.line; // `90 | `\n\n    const lineIndicator = String(currentLine).padStart(pad) + ' | '; // `> `\n\n    const horizontalMark = isTargetLine ? red(HORIZONTAL_MARK) : ' '.repeat(HORIZONTAL_MARK.length); // `> 90 | source`\n\n    errorLocationDisplay.push(horizontalMark + gray(lineIndicator) + lineStr);\n    if (isTargetLine) errorLocationDisplay.push(verticalMark);\n  });\n  return new SyntaxError(message + '\\n\\n' + errorLocationDisplay.join('\\n'));\n};\n// CONCATENATED MODULE: ./src/parser/tokenizer/operators.ts\nconst binary = new Set(['==', '!=', '>=', '>', '<=', '<', '~', '!~']);\nconst unary = new Set(['!']);\nconst logical = new Set(['||', '&&']);\nconst operators_assign = new Set(['=', '*=', '+=', '-=', '/=', '||=', '&&=']);\nconst operators = new Set([...binary, ...unary, ...logical, ...operators_assign]);\nconst getPrecedence = op => {\n  if (binary.has(op)) return 1;\n  if (op === '&&') return 2;\n  if (op === '||') return 3;\n  return 0;\n};\n// EXTERNAL MODULE: ./node_modules/debug/src/browser.js\nvar browser = __webpack_require__(15);\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n\n// CONCATENATED MODULE: ./src/utils/debug.ts\n\nconst vaceline = browser_default()('vaceline'); // stderr is used by default but\n// it is for printing output(code|ast)\n\nvaceline.log = console.log.bind(console);\nconst buildDebug = vaceline.extend.bind(vaceline);\n\n// CONCATENATED MODULE: ./src/parser/tokenizer/index.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nconst debug = buildDebug('tokenize');\nconst debugToken = debug.extend('token');\nconst debugRaw = debug.extend('raw');\nconst symbols = [';', ':', '.', ',', '/', '{', '}', '(', ')', '+'];\n\nconst escapeRegExp = s => s instanceof RegExp ? s.source : s.replace(/[-\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\nconst getJoinedRegExp = s => s.map(escapeRegExp).join('|');\nconst splitters = [\n/* spaces         */\n/ +/,\n/* tabs           */\n/\\t+/,\n/* newline        */\n'\\n',\n/* line comment   */\n/#[^\\n]*|\\/\\/[^\\n]*/,\n/* inline comment */\n/\\/\\*[\\s\\S]*\\*\\//,\n/* string         */\n/\"[^\\n]*?\"/,\n/* multiline str  */\n/{\"[\\s\\S]*?\"}/,\n/* ident          */\n/[A-z][A-z\\d-_]*/,\n/* numeric        */\n/[\\d][\\d.]+/, ...operators, ...symbols];\nconst matchers = {\n  symbols: new Set(symbols),\n  operators: new Set(operators)\n};\nconst reSplitter = new RegExp('(' + getJoinedRegExp(splitters) + ')');\nclass tokenizer_Tokenizer {\n  constructor(raw)\n  /* opts: { keywords?: Array<string> } = {} */\n  {\n    _defineProperty(this, \"raw\", void 0);\n\n    _defineProperty(this, \"source\", void 0);\n\n    this.raw = raw;\n    this.source = raw.split(reSplitter);\n\n    if (debugRaw.enabled) {\n      debugRaw(this.source.filter(t => !/^\\s*$/.test(t)));\n    }\n  }\n\n  tokenize() {\n    const source = this.source;\n    const tokens = [];\n    let cur = 0;\n    let offset = 0;\n    let line = 1;\n    let column = 1;\n\n    while (cur < source.length) {\n      const str = source[cur++];\n\n      if (!str) {\n        continue;\n      } // only whitespaces or tabs\n\n\n      if (/^( |\\t)/.test(str)) {\n        offset += str.length;\n        column += str.length;\n        continue;\n      } // newline\n\n\n      if (str === '\\n') {\n        offset += str.length;\n        line++;\n        column = 1;\n        continue;\n      }\n\n      let err = undefined;\n      /** determine token start */\n\n      const startOffset = offset;\n      const startLine = line;\n      const startColumn = column;\n      /** determine token type */\n\n      let type;\n\n      if (matchers.symbols.has(str)) {\n        type = 'symbol';\n      } else if (matchers.operators.has(str)) {\n        type = 'operator';\n      } else if (/^(true|false)$/.test(str)) {\n        type = 'boolean';\n      } else if (str.startsWith('\"')) {\n        type = 'string';\n\n        if (!str.endsWith('\"') || str === '\"') {\n          err = 'invalid token (string may have newlines inside normal quotes, use `{\" \"}`)';\n        }\n      } else if (str.startsWith('{\"')) {\n        type = 'string'; // string can have newline inside\n\n        const lines = str.split('\\n');\n        line += lines.length - 1;\n        column = lines[lines.length - 1].length - (str.length - 1);\n      } else if (/^[\\d.]+$/.test(str)) {\n        type = 'numeric';\n      } else if (/^(#|\\/\\/|\\/\\*)/.test(str)) {\n        type = 'comment';\n      } else {\n        type = 'ident';\n\n        if (!/^[A-Za-z][A-Za-z\\d.-_]*/.test(str)) {\n          err = 'invalid token';\n        }\n      }\n      /** update position */\n\n\n      offset += str.length;\n      column += str.length;\n      /** determine token end */\n\n      const endOffset = offset - 1;\n      const endLine = line;\n      const endColumn = column - 1;\n\n      if (err) {\n        throw createError(this.raw, err, {\n          offset: startOffset,\n          line: startLine,\n          column: startColumn\n        }, {\n          offset: endOffset,\n          line: endLine,\n          column\n        });\n      } // TODO: implement comment handling\n\n\n      if (type === 'comment') continue;\n      const token = {\n        type,\n        value: str,\n        loc: {\n          start: {\n            offset: startOffset,\n            line: startLine,\n            column: startColumn\n          },\n          end: {\n            offset: endOffset,\n            line: endLine,\n            column: endColumn\n          }\n        }\n      };\n\n      if (debugToken.enabled) {\n        debugToken(`${token.type}: ${token.value}`);\n      }\n\n      tokens.push(token);\n    }\n\n    return tokens;\n  }\n\n}\n// CONCATENATED MODULE: ./src/parser/token-reader.ts\nfunction token_reader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass TokenReader {\n  constructor(tokens) {\n    token_reader_defineProperty(this, \"tokens\", void 0);\n\n    token_reader_defineProperty(this, \"cur\", void 0);\n\n    token_reader_defineProperty(this, \"comments\", void 0);\n\n    this.tokens = tokens;\n    this.comments = [];\n    this.cur = 0;\n  }\n\n  getCurrentToken() {\n    return this.tokens[this.cur - 1];\n  }\n\n  jumpTo(cur) {\n    this.cur = cur;\n  }\n\n  getCursor() {\n    return this.cur;\n  }\n\n  get(cur) {\n    return this.tokens[cur];\n  }\n\n  read() {\n    const token = this.tokens[this.cur++];\n\n    if (!token) {\n      throw new SyntaxError('Unexpected EOF');\n    }\n\n    if (token.type === 'comment') {\n      this.comments.push(token);\n      return this.read();\n    }\n\n    return token;\n  }\n\n  peek() {\n    const token = this.tokens[this.cur];\n    if (!token) return null;\n\n    if (token.type === 'comment') {\n      this.comments.push(token);\n      this.take();\n      return this.peek();\n    }\n\n    return token;\n  }\n\n  take() {\n    this.cur++;\n  }\n\n}\n// CONCATENATED MODULE: ./src/utils/token.ts\nconst isToken = (token, type, value) => !!token && token.type === type && (value !== undefined ? value instanceof RegExp ? value.test(token.value) : token.value === value : true);\n// EXTERNAL MODULE: ./src/nodes/defs.ts\nvar defs = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./node_modules/prettier/doc.js\nvar prettier_doc = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./src/generator/printAST.ts\n\nconst printNode = (node, state, options) => {\n  switch (node.type) {\n    case 'Program':\n      return printProgram(node, state, options);\n\n    case 'AclStatement':\n      return printAclStatement(node, state, options);\n\n    case 'AddStatement':\n      return printAddStatement(node, state, options);\n\n    case 'BackendStatement':\n      return printBackendStatement(node, state, options);\n\n    case 'CallStatement':\n      return printCallStatement(node, state, options);\n\n    case 'DeclareStatement':\n      return printDeclareStatement(node, state, options);\n\n    case 'ErrorStatement':\n      return printErrorStatement(node, state, options);\n\n    case 'ExpressionStatement':\n      return printExpressionStatement(node, state, options);\n\n    case 'IfStatement':\n      return printIfStatement(node, state, options);\n\n    case 'ImportStatement':\n      return printImportStatement(node, state, options);\n\n    case 'IncludeStatement':\n      return printIncludeStatement(node, state, options);\n\n    case 'LogStatement':\n      return printLogStatement(node, state, options);\n\n    case 'RestartStatement':\n      return printRestartStatement(node, state, options);\n\n    case 'ReturnStatement':\n      return printReturnStatement(node, state, options);\n\n    case 'SetStatement':\n      return printSetStatement(node, state, options);\n\n    case 'SubroutineStatement':\n      return printSubroutineStatement(node, state, options);\n\n    case 'SyntheticStatement':\n      return printSyntheticStatement(node, state, options);\n\n    case 'TableStatement':\n      return printTableStatement(node, state, options);\n\n    case 'UnsetStatement':\n      return printUnsetStatement(node, state, options);\n\n    case 'BooleanLiteral':\n      return printBooleanLiteral(node, state, options);\n\n    case 'DurationLiteral':\n      return printDurationLiteral(node, state, options);\n\n    case 'MultilineLiteral':\n      return printMultilineLiteral(node, state, options);\n\n    case 'NumericLiteral':\n      return printNumericLiteral(node, state, options);\n\n    case 'StringLiteral':\n      return printStringLiteral(node, state, options);\n\n    case 'BinaryExpression':\n      return printBinaryExpression(node, state, options);\n\n    case 'BooleanExpression':\n      return printBooleanExpression(node, state, options);\n\n    case 'ConcatExpression':\n      return printConcatExpression(node, state, options);\n\n    case 'FunCallExpression':\n      return printFunCallExpression(node, state, options);\n\n    case 'Identifier':\n      return printIdentifier(node, state, options);\n\n    case 'Ip':\n      return printIp(node, state, options);\n\n    case 'LogicalExpression':\n      return printLogicalExpression(node, state, options);\n\n    case 'Member':\n      return printMember(node, state, options);\n\n    case 'UnaryExpression':\n      return printUnaryExpression(node, state, options);\n\n    case 'ValuePair':\n      return printValuePair(node, state, options);\n\n    case 'BackendDefinition':\n      return printBackendDefinition(node, state, options);\n\n    case 'TableDefinition':\n      return printTableDefinition(node, state, options);\n  }\n};\nconst printStatements = (state, stmts) => {\n  const doc = [];\n\n  for (const stmt of stmts) {\n    if (stmt.loc && stmt.loc.start.line > state.lineNum) {\n      let delta = stmt.loc.start.line - state.lineNum;\n\n      while (delta--) {\n        doc.push(prettier_doc[\"builders\"].hardline);\n      }\n\n      state.lineNum = stmt.loc.start.line;\n    }\n\n    doc.push(stmt.print(state), prettier_doc[\"builders\"].hardline);\n    state.lineNum++;\n  }\n\n  doc.pop();\n  return prettier_doc[\"builders\"].concat(doc);\n};\nconst printAST_base = printer => {\n  return (node, state, options) => {\n    const printed = printer(node, state, options); // Some ops\n\n    return printed;\n  };\n};\nconst printProgram = printAST_base((node, state) => {\n  return printStatements(state, node.body);\n});\nconst printBooleanLiteral = printAST_base(node => {\n  return node.value;\n});\nconst printStringLiteral = printAST_base(node => {\n  return node.value;\n});\nconst printMultilineLiteral = printAST_base(node => {\n  return node.value;\n});\nconst printDurationLiteral = printAST_base(node => {\n  return node.value;\n});\nconst printNumericLiteral = printAST_base(node => {\n  return node.value;\n});\nconst printIdentifier = printAST_base(node => {\n  return node.name;\n});\nconst printIp = printAST_base(node => {\n  return node.cidr ? `\"${node.value}\"/${node.cidr}` : `\"${node.value}\"`;\n});\nconst printMember = printAST_base((node, state, options) => {\n  const {\n    neverBreak = false,\n    broken = false\n  } = options !== null && options !== void 0 ? options : {};\n  const shouldBreak = !neverBreak && ( // break if child is also a Member or if also parent is already broken\n  node.base.type === 'Member' || broken); // printExpr('Member', state, {})\n\n  return prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].concat([node.base.print(state, {\n    neverBreak,\n    broken: shouldBreak\n  }), prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat([shouldBreak ? prettier_doc[\"builders\"].softline : '', '.', printIdentifier(node.member, state)]))]))]);\n});\nconst printValuePair = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat([node.base.print(state), ':', printIdentifier(node.name, state)]);\n});\nconst printBooleanExpression = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat(['(', prettier_doc[\"builders\"].ifBreak(prettier_doc[\"builders\"].softline, ''), node.body.print(state)])), prettier_doc[\"builders\"].ifBreak(prettier_doc[\"builders\"].softline, ''), ')']));\n});\nconst printUnaryExpression = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat([node.operator, node.argument.print(state)]);\n});\nconst printFunCallExpression = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat([node.callee.print(state), '(', prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].ifBreak(prettier_doc[\"builders\"].line, ''), prettier_doc[\"builders\"].join(prettier_doc[\"builders\"].concat([',', prettier_doc[\"builders\"].line]), node.args.map(n => n.print(state))), prettier_doc[\"builders\"].ifBreak(',', '')])), prettier_doc[\"builders\"].ifBreak(prettier_doc[\"builders\"].line, '')])), ')']);\n});\nconst printConcatExpression = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].join(prettier_doc[\"builders\"].line, node.body.map(n => n.print(state)))));\n});\nconst printBinaryExpression = printAST_base((node, state) => {\n  const left = node.left.type === 'BinaryExpression' ? prettier_doc[\"builders\"].concat(['(', printBinaryExpression(node.left, state), ')']) : node.left.print(state);\n  return prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].concat([left, ' ', prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat([node.operator, prettier_doc[\"builders\"].line, node.right.print(state)]))]));\n});\nconst printLogicalExpression = printAST_base((node, state) => {\n  const left = node.left.type === 'LogicalExpression' && node.operator === '||' && node.left.operator === '&&' ? prettier_doc[\"builders\"].concat(['(', printLogicalExpression(node.left, state), ')']) : node.left.print(state);\n  const right = node.right.type === 'LogicalExpression' && node.operator === '||' && node.right.operator === '&&' ? prettier_doc[\"builders\"].concat(['(', printLogicalExpression(node.right, state), ')']) : node.right.print(state);\n  return prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].concat([left, ' ', prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat([node.operator, prettier_doc[\"builders\"].line, right]))]));\n});\nconst printExpressionStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat([node.body.print(state), ';']);\n});\nconst printIncludeStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['include ', printStringLiteral(node.module, state), ';']);\n});\nconst printImportStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['import ', node.module.print(state), ';']);\n});\nconst printCallStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['call ', node.subroutine.print(state), ';']);\n});\nconst printDeclareStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['declare ', 'local ', node.id.print(state, {\n    neverBreak: true\n  }), ' ', node.valueType, ';']);\n});\nconst printAddStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat(['add ', node.left.print(state, {\n    neverBreak: true\n  }), ' ', node.operator, prettier_doc[\"builders\"].line, node.right.print(state), ';'])));\n});\nconst printSetStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat(['set ', node.left.print(state, {\n    neverBreak: true\n  }), ' ', node.operator, prettier_doc[\"builders\"].line, node.right.print(state, {\n    neverBreak: true\n  }), ';'])));\n});\nconst printUnsetStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['unset ', node.id.print(state, {\n    neverBreak: true\n  }), ';']);\n});\nconst printReturnStatement = printAST_base(node => {\n  // TODO: handle the optional parens\n  return prettier_doc[\"builders\"].concat(['return ', '(', node.action, ')', ';']);\n});\nconst printErrorStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].join(' ', ['error', node.status.toString(), node.message && node.message.print(state)].filter(Boolean)), ';']);\n});\nconst printRestartStatement = printAST_base(() => {\n  return 'restart;';\n});\nconst printSyntheticStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['synthetic ', node.response.print(state), ';']);\n});\nconst printLogStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['log ', node.content.print(state), ';']);\n});\nconst printIfStatement = printAST_base((node, state) => {\n  const doc = ['if ', prettier_doc[\"builders\"].group(prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat(['(', prettier_doc[\"builders\"].ifBreak(prettier_doc[\"builders\"].hardline, ''), node.test.print(state)])), prettier_doc[\"builders\"].ifBreak(prettier_doc[\"builders\"].hardline, ''), ') '])), '{', prettier_doc[\"builders\"].indent(printStatements(state, node.consequent)), prettier_doc[\"builders\"].hardline, '}'];\n\n  if (node.alternative) {\n    const alternative = Array.isArray(node.alternative) ? [' else {', prettier_doc[\"builders\"].indent(printStatements(state, node.alternative)), prettier_doc[\"builders\"].hardline, '}'] : [' else ', printIfStatement(node.alternative, state)];\n    return prettier_doc[\"builders\"].concat([...doc, ...alternative]);\n  }\n\n  return prettier_doc[\"builders\"].concat(doc);\n});\nconst printSubroutineStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['sub ', printIdentifier(node.id, state), ' {', prettier_doc[\"builders\"].indent(printStatements(state, node.body)), prettier_doc[\"builders\"].hardline, '}']);\n});\nconst printAclStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['acl ', printIdentifier(node.id, state), ' {', prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].hardline, prettier_doc[\"builders\"].join(prettier_doc[\"builders\"].hardline, node.body.map(ip => printIp(ip, state)).map(doc => prettier_doc[\"builders\"].concat([doc, ';'])))])), prettier_doc[\"builders\"].hardline, '}']);\n});\nconst printBackendDefinition = printAST_base((node, state) => {\n  const printedValue = Array.isArray(node.value) ? prettier_doc[\"builders\"].concat(['{', prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].hardline, prettier_doc[\"builders\"].join(prettier_doc[\"builders\"].hardline, node.value.map(v => printBackendDefinition(v, state)))])), prettier_doc[\"builders\"].hardline, '}']) : prettier_doc[\"builders\"].concat([node.value.print(state), ';']);\n  return prettier_doc[\"builders\"].concat(['.', node.key, ' = ', printedValue]);\n});\nconst printBackendStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['backend ', printIdentifier(node.id, state), ' ', prettier_doc[\"builders\"].concat(['{', prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].hardline, prettier_doc[\"builders\"].join(prettier_doc[\"builders\"].hardline, node.body.map(d => printBackendDefinition(d, state)))])), prettier_doc[\"builders\"].hardline, '}'])]);\n});\nconst printTableDefinition = printAST_base(node => {\n  return prettier_doc[\"builders\"].concat([node.key, ':', node.value]);\n});\nconst printTableStatement = printAST_base((node, state) => {\n  return prettier_doc[\"builders\"].concat(['table ', printIdentifier(node.id, state), ' {', prettier_doc[\"builders\"].indent(prettier_doc[\"builders\"].concat([prettier_doc[\"builders\"].hardline, prettier_doc[\"builders\"].join(prettier_doc[\"builders\"].concat([',', prettier_doc[\"builders\"].hardline]), node.body.map(td => printTableDefinition(td, state))) // TODO: handle trailing comma\n  // ',',\n  ])), prettier_doc[\"builders\"].hardline, '}']);\n});\n// CONCATENATED MODULE: ./src/nodes/node.ts\nfunction node_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nconst buildEmptryLocation = () => ({\n  start: {\n    offset: NaN,\n    line: NaN,\n    column: NaN\n  },\n  end: {\n    offset: NaN,\n    line: NaN,\n    column: NaN\n  }\n});\n\nconst flat = arr => arr.reduce((acc, cur) => acc.concat(cur), []);\n\n\n\nclass node_Node {\n  constructor() {\n    node_defineProperty(this, \"type\", void 0);\n\n    node_defineProperty(this, \"loc\", void 0);\n  }\n\n  next() {\n    return flat(Object.values(this).filter(v => Array.isArray(v) || v instanceof node_Node));\n  }\n\n  print(state, options) {\n    return printNode(this, state, options);\n  }\n\n  is(...types) {\n    return types.includes(this.type);\n  }\n\n}\n// CONCATENATED MODULE: ./src/nodes/builders.gen.ts\n\nfunction buildProgram(body, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'Program';\n  node.loc = loc || buildEmptryLocation();\n  node.body = body;\n  return node;\n}\nfunction buildBooleanLiteral(value, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'BooleanLiteral';\n  node.loc = loc || buildEmptryLocation();\n  node.value = value;\n  return node;\n}\nfunction buildStringLiteral(value, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'StringLiteral';\n  node.loc = loc || buildEmptryLocation();\n  node.value = value;\n  return node;\n}\nfunction buildMultilineLiteral(value, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'MultilineLiteral';\n  node.loc = loc || buildEmptryLocation();\n  node.value = value;\n  return node;\n}\nfunction buildDurationLiteral(value, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'DurationLiteral';\n  node.loc = loc || buildEmptryLocation();\n  node.value = value;\n  return node;\n}\nfunction buildNumericLiteral(value, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'NumericLiteral';\n  node.loc = loc || buildEmptryLocation();\n  node.value = value;\n  return node;\n}\nfunction buildIdentifier(name, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'Identifier';\n  node.loc = loc || buildEmptryLocation();\n  node.name = name;\n  return node;\n}\nfunction buildIp(value, cidr, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'Ip';\n  node.loc = loc || buildEmptryLocation();\n  node.value = value;\n  node.cidr = cidr;\n  return node;\n}\nfunction buildMember(base, member, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'Member';\n  node.loc = loc || buildEmptryLocation();\n  node.base = base;\n  node.member = member;\n  return node;\n}\nfunction buildValuePair(base, name, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'ValuePair';\n  node.loc = loc || buildEmptryLocation();\n  node.base = base;\n  node.name = name;\n  return node;\n}\nfunction buildBooleanExpression(body, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'BooleanExpression';\n  node.loc = loc || buildEmptryLocation();\n  node.body = body;\n  return node;\n}\nfunction buildUnaryExpression(operator, argument, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'UnaryExpression';\n  node.loc = loc || buildEmptryLocation();\n  node.operator = operator;\n  node.argument = argument;\n  return node;\n}\nfunction buildFunCallExpression(callee, args, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'FunCallExpression';\n  node.loc = loc || buildEmptryLocation();\n  node.callee = callee;\n  node.args = args;\n  return node;\n}\nfunction buildConcatExpression(body, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'ConcatExpression';\n  node.loc = loc || buildEmptryLocation();\n  node.body = body;\n  return node;\n}\nfunction buildBinaryExpression(left, right, operator, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'BinaryExpression';\n  node.loc = loc || buildEmptryLocation();\n  node.left = left;\n  node.right = right;\n  node.operator = operator;\n  return node;\n}\nfunction buildLogicalExpression(left, right, operator, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'LogicalExpression';\n  node.loc = loc || buildEmptryLocation();\n  node.left = left;\n  node.right = right;\n  node.operator = operator;\n  return node;\n}\nfunction buildExpressionStatement(body, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'ExpressionStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.body = body;\n  return node;\n}\nfunction buildIncludeStatement(module, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'IncludeStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.module = module;\n  return node;\n}\nfunction buildImportStatement(module, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'ImportStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.module = module;\n  return node;\n}\nfunction buildCallStatement(subroutine, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'CallStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.subroutine = subroutine;\n  return node;\n}\nfunction buildDeclareStatement(id, valueType, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'DeclareStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.id = id;\n  node.valueType = valueType;\n  return node;\n}\nfunction buildAddStatement(left, right, operator, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'AddStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.left = left;\n  node.right = right;\n  node.operator = operator;\n  return node;\n}\nfunction buildSetStatement(left, right, operator, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'SetStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.left = left;\n  node.right = right;\n  node.operator = operator;\n  return node;\n}\nfunction buildUnsetStatement(id, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'UnsetStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.id = id;\n  return node;\n}\nfunction buildReturnStatement(action, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'ReturnStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.action = action;\n  return node;\n}\nfunction buildErrorStatement(status, message, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'ErrorStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.status = status;\n  node.message = message;\n  return node;\n}\nfunction buildRestartStatement(loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'RestartStatement';\n  node.loc = loc || buildEmptryLocation();\n  return node;\n}\nfunction buildSyntheticStatement(response, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'SyntheticStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.response = response;\n  return node;\n}\nfunction buildLogStatement(content, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'LogStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.content = content;\n  return node;\n}\nfunction buildIfStatement(test, consequent, alternative, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'IfStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.test = test;\n  node.consequent = consequent;\n  node.alternative = alternative;\n  return node;\n}\nfunction buildSubroutineStatement(id, body, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'SubroutineStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.id = id;\n  node.body = body;\n  return node;\n}\nfunction buildAclStatement(id, body, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'AclStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.id = id;\n  node.body = body;\n  return node;\n}\nfunction buildBackendDefinition(key, value, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'BackendDefinition';\n  node.loc = loc || buildEmptryLocation();\n  node.key = key;\n  node.value = value;\n  return node;\n}\nfunction buildBackendStatement(id, body, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'BackendStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.id = id;\n  node.body = body;\n  return node;\n}\nfunction buildTableDefinition(key, value, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'TableDefinition';\n  node.loc = loc || buildEmptryLocation();\n  node.key = key;\n  node.value = value;\n  return node;\n}\nfunction buildTableStatement(id, body, loc) {\n  const node = Object.create(node_Node.prototype);\n  node.type = 'TableStatement';\n  node.loc = loc || buildEmptryLocation();\n  node.id = id;\n  node.body = body;\n  return node;\n}\n// EXTERNAL MODULE: ./src/nodes/nodes.gen.ts\nvar nodes_gen = __webpack_require__(5);\n\n// CONCATENATED MODULE: ./src/nodes/index.ts\n\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/is-ip/index.js\nvar is_ip = __webpack_require__(18);\nvar is_ip_default = /*#__PURE__*/__webpack_require__.n(is_ip);\n\n// CONCATENATED MODULE: ./src/parser/statement/ip.ts\n\n\n\n\nconst parseIp = (p, token = p.read()) => {\n  const str = p.validateToken(token, 'string');\n  const value = str.value.slice(1, -1); // strip quotes\n\n  const loc = p.startNode();\n  const isLocalhost = value === 'localhost';\n  const version = is_ip_default.a.version(value);\n\n  if (!isLocalhost && !version) {\n    throw createError(p.source, 'invalid ip address, Expected `\"localhost\"`, \"IP\"`, or `\"IP\"/prefix`', token.loc.start, token.loc.end);\n  }\n\n  let cidr = undefined;\n\n  if (isToken(p.peek(), 'symbol', '/')) {\n    p.take();\n    const token = p.validateToken(p.read(), 'numeric');\n    cidr = Number(token.value);\n    let message;\n\n    if (isLocalhost && cidr != undefined) {\n      message = 'A prefix length is not supported for `localhost`';\n    }\n\n    if (version === 4 && (cidr < 0 || 32 < cidr)) {\n      message = 'IPv4 prefix length must be between 0 and 32';\n    }\n\n    if (version === 6 && (cidr < 0 || 128 < cidr)) {\n      message = 'IPv6 prefix length must be between 0 and 128';\n    }\n\n    if (message) {\n      throw createError(p.source, `invalid ip address(${message})`, token.loc.start, token.loc.end);\n    }\n  }\n\n  return p.finishNode(builders_gen_namespaceObject.buildIp(value, cidr, loc));\n};\n// CONCATENATED MODULE: ./src/parser/literal.ts\n\n\n\n\nconst parseLiteral = (p, token = p.read(), loc = p.startNode()) => {\n  if (token.type === 'boolean') {\n    return p.finishNode(builders_gen_namespaceObject.buildBooleanLiteral(token.value, loc));\n  }\n\n  if (token.type === 'string') {\n    if (isToken(p.peek(), 'symbol', '/')) {\n      return parseIp(p, token);\n    }\n\n    return p.finishNode(builders_gen_namespaceObject.buildStringLiteral(token.value, loc));\n  }\n\n  if (token.type === 'numeric') {\n    if (isToken(p.peek(), 'ident', /ms|s|m|h|d|y/)) {\n      return p.finishNode(builders_gen_namespaceObject.buildDurationLiteral(token.value + p.read().value, loc));\n    }\n\n    if (!Number.isNaN(Number(token.value))) {\n      if (token.value.startsWith('.') || token.value.length !== 1 && token.value.startsWith('0')) {\n        throw createError(p.source, 'invalid number', loc.start, loc.end);\n      }\n\n      return p.finishNode(builders_gen_namespaceObject.buildNumericLiteral(token.value, loc));\n    }\n\n    throw createError(p.source, 'invalid token', loc.start, loc.end);\n  }\n\n  return null;\n};\n// CONCATENATED MODULE: ./src/parser/compound.ts\n\nconst parseCompound = (p, parse, until, delimiter, semi = false) => {\n  const compound = []; // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    const token = p.peek();\n\n    if (!token) {\n      break;\n    }\n\n    p.take();\n    const node = parse(p, token);\n    compound.push(node);\n\n    if (delimiter) {\n      if (isToken(p.peek(), 'symbol', delimiter)) {\n        p.take();\n        continue;\n      }\n\n      if (until) p.validateToken(p.read(), 'symbol', until);\n      break;\n    }\n\n    if (semi) p.validateToken(p.read(), 'symbol', ';');\n\n    if (until && isToken(p.peek(), 'symbol', until)) {\n      p.take();\n      break;\n    }\n  }\n\n  return compound;\n};\n// CONCATENATED MODULE: ./src/parser/expression/identifier.ts\n\n\nconst parseIdentifier = (p, token, base = p.finishNode(builders_gen_namespaceObject.buildIdentifier((token !== null && token !== void 0 ? token : p.read()).value, p.startNode()))) => {\n  if (isToken(p.peek(), 'symbol', '.')) {\n    p.take();\n    return parseIdentifier(p, undefined, parseMember(p, base));\n  }\n\n  if (isToken(p.peek(), 'symbol', ':')) {\n    p.take(); // return the expression here because there won't be any recursive pattern\n\n    return parseValuePair(p, base);\n  }\n\n  return base;\n};\nconst parseMember = (p, base) => {\n  const memberTok = p.read();\n  const member = p.finishNode(builders_gen_namespaceObject.buildIdentifier(memberTok.value, p.startNode()));\n  return builders_gen_namespaceObject.buildMember(base, member, {\n    start: base.loc.start,\n    end: member.loc.end\n  });\n};\nconst parseValuePair = (p, base) => {\n  const nameTok = p.read();\n  const name = p.finishNode(builders_gen_namespaceObject.buildIdentifier(nameTok.value, p.startNode()));\n  return builders_gen_namespaceObject.buildValuePair(base, name, {\n    start: base.loc.start,\n    end: name.loc.end\n  });\n};\n// CONCATENATED MODULE: ./src/parser/expression/humble.ts\n\n\n\n\n\n\n\nconst parseHumbleExpr = (p, token = p.read(), loc = p.startNode()) => {\n  const literal = parseLiteral(p, token);\n  if (literal) return literal;\n\n  if (token.type === 'ident') {\n    const ident = parseIdentifier(p, token);\n\n    if (isToken(p.peek(), 'symbol', '(')) {\n      p.take();\n      const args = parseCompound(p, parseExpr, ')', ',');\n      return p.finishNode(builders_gen_namespaceObject.buildFunCallExpression(ident, args, loc));\n    }\n\n    return ident;\n  }\n\n  if (token.type === 'symbol') {\n    if (token.value === '(') {\n      const body = parseExpr(p);\n      p.validateToken(p.read(), 'symbol', ')');\n      return p.finishNode(builders_gen_namespaceObject.buildBooleanExpression(body, loc));\n    }\n  }\n\n  if (token.type === 'operator') {\n    if (token.value === '!') {\n      return p.finishNode(builders_gen_namespaceObject.buildUnaryExpression(token.value, parseExpr(p), loc));\n    }\n  }\n\n  throw createError(p.source, '[expr] not implemented yet', loc.start, loc.end);\n};\n// CONCATENATED MODULE: ./src/parser/expression/operator.ts\n\n\n\n\nconst parseOperatorExpr = (p, token = p.read(), shortcut = false) => {\n  const expr = parseHumbleExpr(p, token);\n  if (shortcut) return expr;\n\n  if (isToken(token, 'symbol', ';')) {\n    return expr;\n  } // let node = p.startNode()\n\n\n  let backup = p.getCursor();\n  const rpn = [expr];\n  const opStack = [];\n  let op; // covert expression sequence into rpn\n\n  while (op = p.peek()) {\n    const isBinary = binary.has(op.value);\n    const isLogical = !isBinary && logical.has(op.value);\n    if (!isBinary && !isLogical) break;\n    p.take();\n    op.precedence = getPrecedence(op.value);\n    op.isBinary = isBinary;\n\n    while (op.precedence >= (opStack[opStack.length - 1] || {}).precedence) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      rpn.push(opStack.pop());\n    }\n\n    opStack.push(op);\n\n    try {\n      rpn.push(parseHumbleExpr(p));\n    } catch (err) {\n      if (err instanceof SyntaxError) {\n        p.jumpTo(backup);\n        break;\n      }\n\n      throw err;\n    }\n\n    backup = p.getCursor();\n  }\n\n  while (opStack.length) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    rpn.push(opStack.pop());\n  } // calculate rpn\n\n\n  const stack = [];\n\n  for (let i = 0; i < rpn.length; i++) {\n    const item = rpn[i];\n\n    if (item instanceof node_Node) {\n      stack.push(item);\n      continue;\n    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    const right = stack.pop(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const left = stack.pop();\n    const builder = item.isBinary ? builders_gen_namespaceObject.buildBinaryExpression : builders_gen_namespaceObject.buildLogicalExpression;\n    const expr = builder(left, right, item.value);\n    expr.loc = {\n      start: left.loc.start,\n      end: right.loc.end\n    };\n    stack.push(expr);\n  }\n\n  if (stack.length !== 1) {\n    throw new Error();\n  }\n\n  return stack[0];\n};\n// CONCATENATED MODULE: ./src/parser/expression/index.ts\n\n\n\n // import { buildDebug } from '../../utils/debug'\n// const debug = buildDebug('parser', 'expression')\n\nconst parseExpr = (p, token = p.read(), shortcut = false) => {\n  const expr = parseOperatorExpr(p, token);\n  if (shortcut) return expr;\n  const loc = p.startNode();\n\n  if (isToken(token, 'symbol', ';')) {\n    return expr;\n  }\n\n  let backup = p.getCursor();\n  const buf = [expr];\n  let nextToken = p.peek();\n\n  while (nextToken) {\n    p.take();\n\n    if (isToken(nextToken, 'symbol', ';')) {\n      break;\n    }\n\n    if (isToken(nextToken, 'symbol', '+')) {\n      nextToken = p.read();\n    }\n\n    try {\n      const expr = parseHumbleExpr(p, nextToken);\n      buf.push(expr);\n      backup = p.getCursor();\n    } catch (err) {\n      if (err instanceof SyntaxError) {\n        break;\n      } else {\n        throw err;\n      }\n    }\n\n    nextToken = p.peek();\n  } // backtrack to the backed-up cursor\n\n\n  p.jumpTo(backup); // the next token wasn't an expression\n\n  if (buf.length === 1) {\n    return expr;\n  }\n\n  return p.finishNode(builders_gen_namespaceObject.buildConcatExpression(buf, loc));\n};\n// CONCATENATED MODULE: ./src/parser/keywords.ts\nconst topLevelKeywords = new Set(['include', 'import', 'sub', 'acl', 'backend', 'table']);\nconst keywords = new Set([// statement directives\n'call', 'declare', 'local', 'declare', 'local', 'add', 'set', 'unset', 'return', 'error', 'restart', 'synthetic', 'log', 'if', 'else', ...topLevelKeywords]); // https://book.varnish-software.com/4.0/chapters/VCL_Basics.html#legal-return-actions\n\nconst returnActions = new Set(['deliver', 'fetch', 'restart', 'hash', 'pass', 'pipe', 'synth', 'purge', 'lookup', // Fastly\n'deliver_stale']);\n// CONCATENATED MODULE: ./src/parser/statement/index.ts\n\n\n\n\n\n\n\n\n\nconst ensureSemi = p => {\n  p.validateToken(p.read(), 'symbol', ';');\n};\n\nconst parseStmt = (p, token = p.read()) => {\n  const loc = p.startNode();\n\n  if (!keywords.has(token.value)) {\n    const body = parseExpr(p, token);\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildExpressionStatement(body, loc));\n  }\n\n  if (token.value === 'set' || token.value === 'add') {\n    const left = p.validateNode(parseExpr(p), 'Identifier', 'Member');\n    const operator = p.validateToken(p.read(), 'operator').value;\n    const right = parseExpr(p);\n    ensureSemi(p);\n    const builder = token.value === 'add' ? builders_gen_namespaceObject.buildAddStatement : builders_gen_namespaceObject.buildSetStatement;\n    return p.finishNode(builder(left, right, operator, loc));\n  }\n\n  if (token.value === 'unset') {\n    const id = p.validateNode(parseExpr(p), 'Identifier', 'Member');\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildUnsetStatement(id, loc));\n  }\n\n  if (token.value === 'include') {\n    const module = p.validateNode(parseExpr(p), 'StringLiteral');\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildIncludeStatement(module, loc));\n  }\n\n  if (token.value === 'import') {\n    const module = p.validateNode(parseExpr(p), 'Identifier');\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildImportStatement(module, loc));\n  }\n\n  if (token.value === 'call') {\n    const subroutine = p.validateNode(parseExpr(p), 'Identifier');\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildCallStatement(subroutine, loc));\n  }\n\n  if (token.value === 'declare') {\n    p.validateToken(p.read(), 'ident', 'local');\n    const id = p.validateNode(parseIdentifier(p, p.read()), 'Identifier', 'Member');\n    const valueType = p.validateToken(p.read(), 'ident').value;\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildDeclareStatement(id, valueType, loc));\n  }\n\n  if (token.value === 'return') {\n    let returnActionToken; // `()` can be skipped\n\n    if (isToken(p.peek(), 'symbol', '(')) {\n      p.take();\n      returnActionToken = p.read();\n      p.validateToken(p.read(), 'symbol', ')');\n    } else {\n      returnActionToken = p.read();\n    }\n\n    if (!returnActions.has(returnActionToken.value)) {\n      throw createError(p.source, 'return action should be one of ' + Array.from(returnActions.values()).join(', '), returnActionToken.loc.start, returnActionToken.loc.end);\n    }\n\n    const action = returnActionToken.value;\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildReturnStatement(action, loc));\n  }\n\n  if (token.value === 'error') {\n    const status = Number(p.validateToken(p.read(), 'numeric').value); // `message` can be void\n\n    if (isToken(p.peek(), 'symbol', ';')) {\n      p.take();\n      return p.finishNode(builders_gen_namespaceObject.buildErrorStatement(status, undefined, loc));\n    }\n\n    const message = parseExpr(p);\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildErrorStatement(status, message, loc));\n  }\n\n  if (token.value === 'restart') {\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildRestartStatement(loc));\n  }\n\n  if (token.value === 'synthetic') {\n    const response = parseExpr(p);\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildSyntheticStatement(response, loc));\n  }\n\n  if (token.value === 'log') {\n    const content = parseExpr(p);\n    ensureSemi(p);\n    return p.finishNode(builders_gen_namespaceObject.buildLogStatement(content, loc));\n  }\n\n  if (token.value === 'if') {\n    return parseIfStatement(p, loc);\n  }\n\n  if (token.value === 'sub') {\n    const id = p.validateNode(parseExpr(p, p.read(), true), 'Identifier');\n    p.validateToken(p.read(), 'symbol', '{');\n    const body = parseCompound(p, parseStmt, '}');\n    return p.finishNode(builders_gen_namespaceObject.buildSubroutineStatement(id, body, loc));\n  }\n\n  if (token.value === 'acl') {\n    const id = p.validateNode(parseExpr(p, p.read(), true), 'Identifier');\n    p.validateToken(p.read(), 'symbol', '{');\n    const body = parseCompound(p, parseIp, '}', undefined, true);\n    return p.finishNode(builders_gen_namespaceObject.buildAclStatement(id, body, loc));\n  }\n\n  if (token.value === 'backend') {\n    const id = p.validateNode(parseExpr(p, p.read(), true), 'Identifier');\n    p.validateToken(p.read(), 'symbol', '{');\n    const body = parseCompound(p, parseBackendDef, '}');\n    return p.finishNode(builders_gen_namespaceObject.buildBackendStatement(id, body, loc));\n  }\n\n  if (token.value === 'table') {\n    return parseTableStatement(p, loc);\n  }\n\n  throw createError(p.source, '[stmt] not implemented yet', loc.start, loc.end);\n};\n\nconst parseBackendDef = (p, token = p.read()) => {\n  const loc = p.startNode();\n  p.validateToken(token, 'symbol', '.');\n  const key = p.validateNode(parseExpr(p), 'Identifier').name;\n  p.validateToken(p.read(), 'operator', '=');\n  let value;\n\n  if (isToken(p.peek(), 'symbol', '{')) {\n    p.take();\n    value = parseCompound(p, parseBackendDef, '}');\n  } else {\n    value = parseExpr(p);\n    ensureSemi(p);\n  }\n\n  return p.finishNode(builders_gen_namespaceObject.buildBackendDefinition(key, value, loc));\n};\n\nconst parseIfStatement = (p, loc) => {\n  p.validateToken(p.read(), 'symbol', '(');\n  const test = parseExpr(p);\n  p.validateToken(p.read(), 'symbol', ')');\n  p.validateToken(p.read(), 'symbol', '{');\n  const consequent = parseCompound(p, parseStmt, '}');\n  let alternative = undefined;\n  const next = p.peek();\n\n  if (isToken(next, 'ident', /elsif|elseif/)) {\n    p.take();\n    alternative = parseIfStatement(p, p.startNode());\n  } else if (isToken(next, 'ident', 'else')) {\n    p.take();\n\n    if (isToken(p.peek(), 'ident', 'if')) {\n      p.take();\n      alternative = parseIfStatement(p, p.startNode());\n    } else {\n      p.validateToken(p.read(), 'symbol', '{');\n      alternative = parseCompound(p, parseStmt, '}');\n    }\n  }\n\n  return p.finishNode(builders_gen_namespaceObject.buildIfStatement(test, consequent, alternative, loc));\n};\n\nconst parseTableDef = (p, token) => {\n  const loc = p.startNode();\n  const key = p.validateToken(token, 'string').value;\n  p.validateToken(p.read(), 'symbol', ':');\n  const value = p.validateToken(p.read(), 'string').value;\n\n  if (isToken(p.peek(), 'symbol', ',')) {\n    p.take();\n  }\n\n  return p.finishNode(builders_gen_namespaceObject.buildTableDefinition(key, value, loc));\n};\n\nconst parseTableStatement = (p, loc) => {\n  const id = p.validateNode(parseIdentifier(p, p.read()), 'Identifier');\n  p.validateToken(p.read(), 'symbol', '{');\n  const body = parseCompound(p, parseTableDef, '}');\n  return p.finishNode(builders_gen_namespaceObject.buildTableStatement(id, body, loc));\n};\n// CONCATENATED MODULE: ./src/parser/index.ts\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { parser_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction parser_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\nconst parser_debug = buildDebug('parser');\nconst parser_parse = source => new parser_Parser(source).parse();\nclass parser_Parser extends TokenReader {\n  constructor(source)\n  /* opts: { keywords?: Array<string> } = {} */\n  {\n    const tokens = new tokenizer_Tokenizer(source).tokenize();\n    super(tokens);\n\n    parser_defineProperty(this, \"source\", void 0);\n\n    this.source = source;\n  }\n\n  parse() {\n    const loc = this.startNode();\n    const body = parseCompound(this, parseStmt); // TODO: overload builder func type,\n    // to detect we pass `loc` and its return type is surely `NodeWithLoc`\n\n    return this.finishNode(buildProgram(body, loc));\n  }\n\n  startNode() {\n    const startToken = this.getCurrentToken();\n    const start = startToken ? startToken.loc.start : {\n      offset: 0,\n      line: 1,\n      column: 1\n    };\n    return {\n      start,\n      end: {\n        offset: NaN,\n        line: NaN,\n        column: NaN\n      }\n    };\n  }\n\n  finishNode(node) {\n    node.loc.end = this.getCurrentToken().loc.end;\n\n    if (parser_debug.enabled) {\n      const log = _objectSpread({}, node);\n\n      delete log.loc;\n      parser_debug(log);\n    }\n\n    return node;\n  }\n\n  validateNode(node, ...types) {\n    if (!node.is(...types)) {\n      throw createError(this.source, 'expected ' + types.join(', '), node.loc.start, node.loc.end);\n    }\n\n    return node;\n  }\n\n  validateToken(token, type, value) {\n    if (!isToken(token, type, value)) {\n      throw createError(this.source, 'expected ' + [type, value].join(', '), token.loc.start, token.loc.end);\n    }\n\n    return token;\n  }\n\n}\n// CONCATENATED MODULE: ./src/generator/index.ts\n\nconst defaultGenerateOptions = {\n  printWidth: 100,\n  tabWidth: 2,\n  useTabs: false\n};\nconst generate = (ast, options = defaultGenerateOptions) => {\n  var _options$printWidth, _options$tabWidth, _options$useTabs;\n\n  const {\n    formatted\n  } = prettier_doc[\"printer\"].printDocToString(ast.print({\n    lineNum: 1\n  }), {\n    printWidth: (_options$printWidth = options.printWidth) !== null && _options$printWidth !== void 0 ? _options$printWidth : defaultGenerateOptions.printWidth,\n    tabWidth: (_options$tabWidth = options.tabWidth) !== null && _options$tabWidth !== void 0 ? _options$tabWidth : defaultGenerateOptions.tabWidth,\n    useTabs: (_options$useTabs = options.useTabs) !== null && _options$useTabs !== void 0 ? _options$useTabs : defaultGenerateOptions.useTabs\n  });\n  return {\n    code: formatted\n  };\n};\n// CONCATENATED MODULE: ./src/traverser/path.ts\nfunction path_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass NodePath {\n  // hub: HubInterface;\n  // contexts: Array<TraversalContext>;\n  // data: Object;\n  // shouldSkip: boolean;\n  // shouldStop: boolean;\n  // removed: boolean;\n  // opts?: Object\n  // skipKeys?: Object\n  // container?: Object | Array<Object>\n  // scope?: Scope;\n  // type?: string\n  // typeAnnotation?: Object\n  constructor(node, context) {\n    path_defineProperty(this, \"node\", void 0);\n\n    path_defineProperty(this, \"parent\", void 0);\n\n    path_defineProperty(this, \"state\", void 0);\n\n    path_defineProperty(this, \"parentPath\", void 0);\n\n    path_defineProperty(this, \"context\", void 0);\n\n    path_defineProperty(this, \"listKey\", void 0);\n\n    path_defineProperty(this, \"inList\", void 0);\n\n    path_defineProperty(this, \"parentKey\", void 0);\n\n    path_defineProperty(this, \"key\", void 0);\n\n    this.node = node;\n    this.parent = context.parent;\n    this.parentPath = context.parentPath;\n    this.inList = context.inList;\n    this.key = context.key;\n    this.state = context.state;\n  } // getSibling(key: number) {\n  //   if (this.inList) return this.parentPath.nodes\n  // }\n  // TODO:\n  // Manipulation\n  // replaceWith() {}\n  // replaceWithMultiple() {}\n  // insertBefore() {}\n  // insertAfter() {}\n  // remove() {}\n\n\n}\n// CONCATENATED MODULE: ./src/traverser/index.ts\nfunction traverser_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction traverser_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { traverser_ownKeys(Object(source), true).forEach(function (key) { traverser_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { traverser_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction traverser_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nconst traverseNode = (node, callback, context = {\n  parent: null,\n  parentPath: null,\n  inList: false,\n  state: null\n}) => {\n  const path = new NodePath(node, context); // If sobroutine, ..., then set `inList` true\n\n  callback(path, context);\n  const nextNodes = node.next();\n\n  for (const nextNode of nextNodes) {\n    traverseNode(nextNode, callback, traverser_objectSpread({}, context, {\n      parent: node,\n      parentPath: path\n    }));\n  }\n};\nconst traverse = (ast, handler, context = {\n  parent: null,\n  parentPath: null,\n  inList: false,\n  state: null\n}) => {\n  const handle = (path, context) => {\n    if (handler.entry) {\n      handler.entry.call(context.state, path);\n    }\n  };\n\n  traverseNode(ast, handle, context);\n}; // Create traversal path array recursively\n\nconst createPathArray = (ast, context = {\n  parent: null,\n  parentPath: null,\n  inList: false,\n  state: null\n}) => {\n  const paths = [];\n\n  const appendPath = path => paths.push(path);\n\n  traverseNode(ast, appendPath, context);\n  return paths;\n};\n// CONCATENATED MODULE: ./src/lib.ts\n/* concated harmony reexport parse */__webpack_require__.d(__webpack_exports__, \"parse\", function() { return parser_parse; });\n/* concated harmony reexport generate */__webpack_require__.d(__webpack_exports__, \"generate\", function() { return generate; });\n/* concated harmony reexport traverse */__webpack_require__.d(__webpack_exports__, \"traverse\", function() { return traverse; });\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n")},3:function(module,exports){eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},5:function(module,exports){eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI1LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")}});